import random
import math
from sklearn import datasets
iris = datasets.load_iris()

# collaborated with Jonathan Kwok

# create a new array that will store the iris data and targets
myArray = []

#Fill myArray with iris data and target.
for i, iris.data in enumerate(iris.data):
    if i <= 49:
        targets = 0
    elif i <= 99 and i > 49:
        targets = 1
    else:
        targets = 2
    tempArray = [iris.data, targets] #assign targets and data to an array with everything in place
    myArray.append(tempArray)

#Randomize iris
random.shuffle(myArray)
#print(myArray)
#separate training set and test set
trainingSet = myArray[:105] #70%
testSet = myArray[105:]  #30%

class HardCoded:
    def train(self, trainingSet):
        return 0

    def predict(self, testSet, trainingSet):
        kCount = 4
        predictions = []
        top = []
        for i, data in enumerate(testSet):
            distanceArray= []
            nearestNeighbors = []
            for j, data in enumerate(trainingSet):
                t = math.sqrt(math.pow(testSet[i][0][0] - trainingSet[j][0][0], 2) + math.pow(testSet[i][0][1] - trainingSet[j][0][1], 2) + math.pow(testSet[i][0][2] - trainingSet[j][0][2], 2) + math.pow(testSet[i][0][3] - trainingSet[j][0][3], 2))
                tempArray = [t, trainingSet[j][1]]
                # make an array with distances and targets
                distanceArray.append(tempArray) # this is the important array of distances and targets. we need to find the smallest distances.
                # sort
                distanceArray.sort(key=lambda  ele : ele[0])
                count = 0
            # grab the nearest neighbors
            while (count <= kCount):
                    print("hi")
                    tempArray2 = distanceArray[count]
                    nearestNeighbors.append(tempArray2)
                    count +=1
            nearestTargets = [x[1] for x in nearestNeighbors]

            from collections import Counter
            word_counts = Counter(nearestTargets)
            top = word_counts.most_common(1)
            print(top)
            target = top[0][0] #target will equal 0, 1, or 2
            predictions.append(target)
        print (distanceArray)
        print (nearestNeighbors)
        print (nearestTargets)
        return predictions

    def evauluate(self, predictions, testSet):
        correctCount = 0.0
        totalCount = 0.0
        for i, data in enumerate(testSet):
            totalCount +=1
            if predictions[i] == data[1]:
                correctCount +=1
        percentage = correctCount / totalCount
        #print (percentage)
        return percentage

train = HardCoded()

train.train(trainingSet)
predictions = train.predict(testSet, trainingSet)# an array of 0's
print("Predictions:" + str(predictions))
percentage =  train.evauluate(predictions, testSet)
finalAnswer = percentage * 100
print("%.2f" % finalAnswer + "%")